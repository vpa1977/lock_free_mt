#include "../Include/r8.h"
#include "../../MT_Core/Include/log.h"
#include <assert.h>


const long g_FontHeight = 19;
CSymbolInfo g_FontData[] = {
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000}, 
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{1.000000,0.000000,4.000000},	// ' '
	{6.000000,0.000000,4.000000},	// '!'
	{11.000000,0.000000,7.000000},	// '"'
	{19.000000,0.000000,9.000000},	// '#'
	{29.000000,0.000000,9.000000},	// '$'
	{39.000000,0.000000,14.000000},	// '%'
	{54.000000,0.000000,11.000000},	// '&'
	{66.000000,0.000000,3.000000},	// '''
	{70.000000,0.000000,5.000000},	// '('
	{76.000000,0.000000,5.000000},	// ')'
	{82.000000,0.000000,6.000000},	// '*'
	{89.000000,0.000000,9.000000},	// '+'
	{99.000000,0.000000,4.000000},	// ','
	{104.000000,0.000000,5.000000},	// '-'
	{110.000000,0.000000,4.000000},	// '.'
	{115.000000,0.000000,4.000000},	// '/'
	{120.000000,0.000000,9.000000},	// '0'
	{130.000000,0.000000,9.000000},	// '1'
	{140.000000,0.000000,9.000000},	// '2'
	{150.000000,0.000000,9.000000},	// '3'
	{160.000000,0.000000,9.000000},	// '4'
	{170.000000,0.000000,9.000000},	// '5'
	{180.000000,0.000000,9.000000},	// '6'
	{190.000000,0.000000,9.000000},	// '7'
	{200.000000,0.000000,9.000000},	// '8'
	{210.000000,0.000000,9.000000},	// '9'
	{220.000000,0.000000,4.000000},	// ':'
	{225.000000,0.000000,4.000000},	// ';'
	{230.000000,0.000000,9.000000},	// '<'
	{240.000000,0.000000,9.000000},	// '='
	{1.000000,19.000000,9.000000},	// '>'
	{11.000000,19.000000,9.000000},	// '?'
	{21.000000,19.000000,16.000000},	// '@'
	{38.000000,19.000000,11.000000},	// 'A'
	{50.000000,19.000000,11.000000},	// 'B'
	{62.000000,19.000000,11.000000},	// 'C'
	{74.000000,19.000000,12.000000},	// 'D'
	{87.000000,19.000000,11.000000},	// 'E'
	{99.000000,19.000000,10.000000},	// 'F'
	{110.000000,19.000000,13.000000},	// 'G'
	{124.000000,19.000000,12.000000},	// 'H'
	{137.000000,19.000000,5.000000},	// 'I'
	{143.000000,19.000000,8.000000},	// 'J'
	{152.000000,19.000000,10.000000},	// 'K'
	{163.000000,19.000000,9.000000},	// 'L'
	{173.000000,19.000000,13.000000},	// 'M'
	{187.000000,19.000000,11.000000},	// 'N'
	{199.000000,19.000000,12.000000},	// 'O'
	{212.000000,19.000000,10.000000},	// 'P'
	{223.000000,19.000000,12.000000},	// 'Q'
	{236.000000,19.000000,12.000000},	// 'R'
	{1.000000,38.000000,11.000000},	// 'S'
	{13.000000,38.000000,9.000000},	// 'T'
	{23.000000,38.000000,12.000000},	// 'U'
	{36.000000,38.000000,11.000000},	// 'V'
	{48.000000,38.000000,15.000000},	// 'W'
	{64.000000,38.000000,11.000000},	// 'X'
	{76.000000,38.000000,11.000000},	// 'Y'
	{88.000000,38.000000,10.000000},	// 'Z'
	{99.000000,38.000000,4.000000},	// '['
	{104.000000,38.000000,4.000000},	// '\'
	{109.000000,38.000000,4.000000},	// ']'
	{114.000000,38.000000,7.000000},	// '^'
	{122.000000,38.000000,9.000000},	// '_'
	{132.000000,38.000000,5.000000},	// '`'
	{138.000000,38.000000,9.000000},	// 'a'
	{148.000000,38.000000,9.000000},	// 'b'
	{158.000000,38.000000,8.000000},	// 'c'
	{167.000000,38.000000,9.000000},	// 'd'
	{177.000000,38.000000,9.000000},	// 'e'
	{187.000000,38.000000,5.000000},	// 'f'
	{193.000000,38.000000,9.000000},	// 'g'
	{203.000000,38.000000,9.000000},	// 'h'
	{213.000000,38.000000,3.000000},	// 'i'
	{217.000000,38.000000,3.000000},	// 'j'
	{221.000000,38.000000,8.000000},	// 'k'
	{230.000000,38.000000,3.000000},	// 'l'
	{234.000000,38.000000,13.000000},	// 'm'
	{1.000000,57.000000,9.000000},	// 'n'
	{11.000000,57.000000,9.000000},	// 'o'
	{21.000000,57.000000,9.000000},	// 'p'
	{31.000000,57.000000,9.000000},	// 'q'
	{41.000000,57.000000,5.000000},	// 'r'
	{47.000000,57.000000,8.000000},	// 's'
	{56.000000,57.000000,5.000000},	// 't'
	{62.000000,57.000000,9.000000},	// 'u'
	{72.000000,57.000000,7.000000},	// 'v'
	{80.000000,57.000000,11.000000},	// 'w'
	{92.000000,57.000000,7.000000},	// 'x'
	{100.000000,57.000000,7.000000},	// 'y'
	{108.000000,57.000000,8.000000},	// 'z'
	{117.000000,57.000000,5.000000},	// '{'
	{123.000000,57.000000,5.000000},	// '|'
	{129.000000,57.000000,5.000000},	// '}'
	{135.000000,57.000000,9.000000},	// '~'
	{145.000000,57.000000,9.000000},	// ''
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000},
	{0.000000,0.000000,0.000000}
};

#define FONT_TEXTURE_SIZE 256
unsigned long g_FontTexture[] = {
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000002, 0x00202200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02412100, 0x06080e07, 0x00a84108, 0x38400000, 0x0e038040, 0x8383f840, 0x00e0383f, 0x00000000,
	0x82412100, 0x0904110a, 0x00704108, 0x44400000, 0x11044070, 0x04400860, 0x01104420, 0x00000000,
	0x42412100, 0x09021112, 0x00504108, 0x44400000, 0x20882040, 0x08200860, 0x02088220, 0x00000000,
	0x47f12100, 0x09011102, 0x20888088, 0x82400000, 0x20882040, 0x00200850, 0x42088210, 0x00003008,
	0x81200100, 0x06008e02, 0x20008080, 0x82200000, 0x10080040, 0x03a0e848, 0x02084410, 0x00fe0c00,
	0x01200100, 0x06004007, 0x20008080, 0x82200000, 0x0e040040, 0x04611848, 0x02083808, 0x00000300,
	0x01200100, 0x0900200a, 0xfc008080, 0x82201f01, 0x10020040, 0x08220844, 0x03104408, 0x00000080,
	0x01200100, 0x90871012, 0x20008080, 0x82200000, 0x20010040, 0x08220042, 0x02e08208, 0x00fe0300,
	0x03f80100, 0xa0888812, 0x20008080, 0x82100000, 0x20808040, 0x082208fe, 0x02008204, 0x00000c00,
	0x40900000, 0x40888412, 0x20008080, 0x44100000, 0x20804040, 0x08220840, 0x02088204, 0x00003000,
	0x80900000, 0xa108820a, 0x00008080, 0x44100000, 0x11002040, 0x04411040, 0x01104404, 0x00000000,
	0x00900100, 0x1e070107, 0x00004101, 0x38110020, 0x0e0fe040, 0x0380e040, 0x40e03804, 0x00000008,
	0x00000000, 0x00000002, 0x00004100, 0x00080010, 0x00000000, 0x00000000, 0x00000000, 0x00000004,
	0x00000000, 0x00000000, 0x00004100, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00002200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0xf801c000, 0x03f00801, 0xfe03f03c, 0x403c1fe1, 0x04100820, 0x20808021, 0x0fc07808, 0x000fc078,
	0x06022000, 0x04100802, 0x020c10c3, 0x40c30020, 0x84100820, 0x60808020, 0x10418608, 0x00104186,
	0x01041000, 0x08101404, 0x02081081, 0x40810020, 0x44100820, 0x60c18020, 0x20410208, 0x00204102,
	0x7084100c, 0x88101408, 0x02101100, 0x41008020, 0x24100820, 0xa0c18020, 0x20420108, 0x00204201,
	0x88840030, 0x84102208, 0x02101000, 0x40008020, 0x14100820, 0xa0a28020, 0x20420108, 0x00204201,
	0x844200c0, 0x83f02208, 0xfe101000, 0xc0008fe0, 0x0c10083f, 0x20a28020, 0x10420109, 0x00104201,
	0x84410100, 0x84104108, 0x02101000, 0x41f08020, 0x14100820, 0x20948020, 0x0fc20109, 0x000fc201,
	0xc44080c0, 0x88104104, 0x02101000, 0x41008020, 0x24100820, 0x20948020, 0x0042010a, 0x00104201,
	0xb8408030, 0x8810ff83, 0x02101100, 0x41008020, 0x44108820, 0x20888020, 0x0042010a, 0x00204221,
	0x0080000c, 0x08108080, 0x02081081, 0x41810020, 0x84108820, 0x20888020, 0x0041020c, 0x00204142,
	0x03000000, 0x04110043, 0x020c10c3, 0x41c30020, 0x04108820, 0x20808021, 0x0041860c, 0x00204186,
	0xfc008000, 0x03f10040, 0xfe03f03c, 0x413c0021, 0x040f0820, 0x20808fe2, 0x00407808, 0x00404178,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000200,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00200000, 0x00000020, 0x00000000, 0x00000000, 0x00000000,
	0x023fe1f0, 0x40014011, 0xfe401401, 0x0050c133, 0x00200040, 0xc0004000, 0x44401000, 0x00000080,
	0x02020208, 0x40814011, 0x00202202, 0x00888112, 0x00200080, 0x20004000, 0x40001000, 0x00000080,
	0x02020404, 0x20822021, 0x00104104, 0x00008111, 0x00200000, 0x20004000, 0x40001000, 0x00000080,
	0x02020004, 0x20822021, 0x80088088, 0x00008110, 0x03a1f000, 0xf8705c0e, 0x4441d170, 0x000c6888,
	0x02020008, 0x21421041, 0x40050050, 0x00008210, 0x04620800, 0x20886211, 0x44423188, 0x00129884,
	0x020201f0, 0x11441041, 0x20020020, 0x00008210, 0x88220000, 0x21044120, 0x44441104, 0x00210882,
	0x02020200, 0x11440881, 0x10020020, 0x00008210, 0x88220000, 0x21044100, 0x44441104, 0x00210881,
	0x02020400, 0x0a280881, 0x08020050, 0x00008210, 0x8823f000, 0x21fc4100, 0xc4441104, 0x00210881,
	0x02020400, 0x0a280501, 0x04020088, 0x00008410, 0x88220800, 0x20044100, 0x44441104, 0x00210882,
	0x02020404, 0x04100501, 0x02020104, 0x00008410, 0x88220800, 0x21044120, 0x44441104, 0x00210884,
	0x84020208, 0x04100200, 0x01020202, 0x00008410, 0x04620800, 0x20886211, 0x44441188, 0x00210888,
	0x780201f0, 0x04100200, 0xff020401, 0x00008411, 0x03a5f000, 0x20705c0e, 0x44441170, 0x00210890,
	0x00000000, 0x00000000, 0x00000000, 0x00008810, 0x00000000, 0x00000000, 0x04000100, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0xfc008010, 0x00000007, 0x00000000, 0x04000100, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x0000c030, 0x00000000, 0x00000000, 0x04000080, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000078, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00004600, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x04000000, 0x00000000, 0x21000000, 0x00704904, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x04000000, 0x00000000, 0x20800000, 0x00883108, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x04000000, 0x00000000, 0x20800000, 0x01040008, 0x00000000, 0x00000000, 0x00000000,
	0x0741c074, 0x9f1e345c, 0x14014120, 0x2087e414, 0x01040008, 0x00000000, 0x00000000, 0x00000000,
	0x08c2208c, 0x84210c62, 0x24214120, 0x20840412, 0x01000008, 0x00000000, 0x00000000, 0x00000000,
	0x10441104, 0x84010441, 0x22222220, 0x20820222, 0x00800008, 0x00000000, 0x00000000, 0x00000000,
	0x10441104, 0x84010441, 0x42222220, 0x20810221, 0x00400008, 0x00000000, 0x00000000, 0x00000000,
	0x10441104, 0x841e0441, 0x81541420, 0x20408140, 0x00200010, 0x00000000, 0x00000000, 0x00000000,
	0x10441104, 0x84200441, 0x41541420, 0x20808141, 0x00200008, 0x00000000, 0x00000000, 0x00000000,
	0x10441104, 0x84200441, 0x20880820, 0x20804082, 0x00000008, 0x00000000, 0x00000000, 0x00000000,
	0x08c22104, 0x04210462, 0x20880831, 0x20802082, 0x00000008, 0x00000000, 0x00000000, 0x00000000,
	0x0741c104, 0x081e045c, 0x1088082e, 0x2087e044, 0x00200008, 0x00000000, 0x00000000, 0x00000000,
	0x00400000, 0x00000040, 0x00000000, 0x20800040, 0x00000008, 0x00000000, 0x00000000, 0x00000000,
	0x00400000, 0x00000040, 0x00000000, 0x00800020, 0x00000008, 0x00000000, 0x00000000, 0x00000000,
	0x00400000, 0x00000040, 0x00000000, 0x01000020, 0x00000004, 0x00000000, 0x00000000, 0x00000000,
	0x00400000, 0x00000040, 0x00000000, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

template< typename T >
class CBufferHolder
{
public:
	CBufferHolder( unsigned long in_BufferSize )
	{
		m_pData = new T[in_BufferSize];
	}
	~CBufferHolder()
	{
		delete [] m_pData;
	}
	T* GetData() const
	{
		return m_pData;
	}
private:
	T* m_pData;
};

unsigned long
CRenderDX8::CreateFont( const CFontDescription& in_rFontDescription )
{
	//CLog::Print("CRenderDX8::CreateFont()\n");
	assert( in_rFontDescription.m_StartSymbol >= 0 );
	assert( in_rFontDescription.m_StartSymbol + in_rFontDescription.m_Symbols.size() <= 256 );
	CBufferHolder<unsigned long> TextureData( FONT_TEXTURE_SIZE*FONT_TEXTURE_SIZE );
	memset( TextureData.GetData(), 0, FONT_TEXTURE_SIZE*FONT_TEXTURE_SIZE*sizeof(unsigned long) );
	std::vector< CSymbolInfo > Symbols;
	Symbols.resize( in_rFontDescription.m_StartSymbol + in_rFontDescription.m_Symbols.size() );
	long X=0;
	long Y=0;
	bool Ok = true;
	for( size_t i=0; Ok && i<in_rFontDescription.m_Symbols.size(); ++i )
	{
		const CFontDescription::CSymbol& rSymbol = in_rFontDescription.m_Symbols[i];
		//
		if( X+rSymbol.m_Width > FONT_TEXTURE_SIZE )
		{
			X = 0;
			Y += in_rFontDescription.m_FontHeight;
		}
		if( Y+in_rFontDescription.m_FontHeight > FONT_TEXTURE_SIZE )
		{
			Ok = false;
			break;
		}
		//CLog::Print("  %lu('%c') X=%ld Y=%ld\n",i+in_rFontDescription.m_StartSymbol,(char)(i+in_rFontDescription.m_StartSymbol),X,Y);
		//
		Symbols[i+in_rFontDescription.m_StartSymbol].m_X = (float)X;
		Symbols[i+in_rFontDescription.m_StartSymbol].m_Y = (float)Y;
		Symbols[i+in_rFontDescription.m_StartSymbol].m_Width = (float)rSymbol.m_Width;
		//
		assert( rSymbol.m_SymbolGlyph.size() == in_rFontDescription.m_FontHeight*rSymbol.m_Width );
		const unsigned long* pGlyphData = &rSymbol.m_SymbolGlyph[0];
		unsigned long* pTexture = TextureData.GetData() + Y*FONT_TEXTURE_SIZE + X;
		for( long GY=0; GY<in_rFontDescription.m_FontHeight; ++GY,pTexture+=FONT_TEXTURE_SIZE )
		{
			for( long GX=0; GX<rSymbol.m_Width; ++GX,++pGlyphData )
			{
				pTexture[GX] = *pGlyphData;
			}
		}
		//
		X += rSymbol.m_Width;
	}
	if(Ok)
	{
		//
		unsigned long FontTextureHandle = CreateTexture(
			FONT_TEXTURE_SIZE,
			FONT_TEXTURE_SIZE,
			true,
			TextureData.GetData(),
			FONT_TEXTURE_SIZE*FONT_TEXTURE_SIZE*sizeof(unsigned long)
		);
		assert( FontTextureHandle != 0 );
		//
		CPixelShader PSh;
		PSh.m_Passes.resize(1);
		CPixelShaderPass& rPass = PSh.m_Passes[0];
		rPass.m_CullMode = RCM_CCW;
		rPass.m_SrcBlend = RBM_SRCALPHA;
		rPass.m_DstBlend = RBM_INVSRCALPHA;
		rPass.m_bLightingEnabled = false;
		rPass.m_TFactor = 0;
		rPass.m_bAlphaTest = false;
		rPass.m_bDepthWrite = false;
		rPass.m_bDepthEnabled = false;
		rPass.m_ZCmpMode = RCMP_LESSEQUAL;
		{
			// pass 0, textures
			rPass.m_Textures.resize(1);
			rPass.m_Textures[0] = FontTextureHandle;
		}
		rPass.m_Stages.resize(1);
		{
			// pass 0, stage 0
			CPixelShaderPassStage& rStage = rPass.m_Stages[0];
			//
			rStage.m_AlphaArg1 = RTSA_TEXTURE;
			rStage.m_AlphaArg2 = RTSA_DIFFUSE;
			//rStage.m_AlphaOp = RTSO_SELECTARG1;
			rStage.m_AlphaOp = RTSO_MODULATE;
			//
			rStage.m_ColorArg1 = RTSA_TEXTURE;
			rStage.m_ColorArg2 = RTSA_DIFFUSE;
			//rStage.m_ColorOp = RTSO_SELECTARG1;
			rStage.m_ColorOp = RTSO_MODULATE;
			//
			rStage.m_TextureAddressModeU = RTAM_CLAMP;
			rStage.m_TextureAddressModeV = RTAM_CLAMP;
			rStage.m_TextureIndex = 0;
			rStage.m_TextureMagFilter = RTFM_LINEAR;
			rStage.m_TextureMinFilter = RTFM_LINEAR;
			rStage.m_TextureMipFilter = RTFM_NONE;
		}
		unsigned long PixelShaderHandle = CreatePixelShader( PSh );
		assert( PixelShaderHandle != 0 );
		//
		unsigned long FontHandle = m_FontsHandlesStorage.GetNewHandle();
		assert( FontHandle != 0 );
		CFontInfo& rFontInfo = m_FontsMap[ FontHandle ];
		rFontInfo.m_bInternal = false;
		rFontInfo.m_Height = in_rFontDescription.m_FontHeight;
		rFontInfo.m_Symbols = Symbols;
		rFontInfo.m_TextureHandle = FontTextureHandle;
		rFontInfo.m_TextureSize = FONT_TEXTURE_SIZE;
		rFontInfo.m_ShaderHandle = PixelShaderHandle;
		return FontHandle;
	}
	else
		return 0;
}

void
CRenderDX8::CreateInternalFont()
{
	// create font texture and symbols description
	assert( 256 == (sizeof(g_FontData)/sizeof(CSymbolInfo)) );
	unsigned long N = sizeof(g_FontTexture)/sizeof(unsigned long);
	assert( 8*256 == N );
	assert( 256 == FONT_TEXTURE_SIZE );
	CBufferHolder<unsigned long> TextureData( FONT_TEXTURE_SIZE*FONT_TEXTURE_SIZE );
	for( long j=0; j<256; ++j )
	{
		unsigned long* pTextureRow = TextureData.GetData() + j*256;
		for( long i=0; i<8; ++i )
		{
			unsigned long D = g_FontTexture[j*8+i];
			for( long k=0; k<32; ++k )
			{
				if( 0 == (D&1) )
					*pTextureRow = 0x00ffffff;
				else
					*pTextureRow = 0xffffffff;
				D = D>>1;
				pTextureRow++;
			}
		}
	}
	unsigned long FontTextureHandle = CreateTexture(
		FONT_TEXTURE_SIZE,
		FONT_TEXTURE_SIZE,
		true,
		TextureData.GetData(),
		FONT_TEXTURE_SIZE*FONT_TEXTURE_SIZE*sizeof(unsigned long)
	);
	assert( FontTextureHandle != 0 );
	unsigned long FontHandle = m_FontsHandlesStorage.GetNewHandle();
	assert( FontHandle != 0 );
	CFontInfo& rFontInfo = m_FontsMap[ FontHandle ];
	rFontInfo.m_bInternal = true;
	rFontInfo.m_Height = g_FontHeight;
	rFontInfo.m_Symbols.assign(g_FontData,g_FontData+256);
	rFontInfo.m_TextureHandle = FontTextureHandle;
	rFontInfo.m_TextureSize = FONT_TEXTURE_SIZE;

	// create font shader
	CPixelShader PSh;
	PSh.m_Passes.resize(1);
	CPixelShaderPass& rPass = PSh.m_Passes[0];
	rPass.m_CullMode = RCM_CCW;
	rPass.m_SrcBlend = RBM_SRCALPHA;
	rPass.m_DstBlend = RBM_INVSRCALPHA;
	rPass.m_bLightingEnabled = false;
	rPass.m_TFactor = 0;
	rPass.m_bAlphaTest = false;
	rPass.m_bDepthWrite = false;
	rPass.m_bDepthEnabled = false;
	rPass.m_ZCmpMode = RCMP_LESSEQUAL;
	{
		// pass 0, textures
		rPass.m_Textures.resize(1);
		rPass.m_Textures[0] = FontTextureHandle;
	}
	rPass.m_Stages.resize(1);
	{
		// pass 0, stage 0
		CPixelShaderPassStage& rStage = rPass.m_Stages[0];
		//
		rStage.m_AlphaArg1 = RTSA_TEXTURE;
		rStage.m_AlphaArg2 = RTSA_DIFFUSE;
//		rStage.m_AlphaOp = RTSO_SELECTARG1;
		rStage.m_AlphaOp = RTSO_MODULATE;
		//
		rStage.m_ColorArg1 = RTSA_TEXTURE;
		rStage.m_ColorArg2 = RTSA_DIFFUSE;
//		rStage.m_ColorOp = RTSO_SELECTARG1;
		rStage.m_ColorOp = RTSO_MODULATE;
		//
		rStage.m_TextureAddressModeU = RTAM_CLAMP;
		rStage.m_TextureAddressModeV = RTAM_CLAMP;
		rStage.m_TextureIndex = 0;
		rStage.m_TextureMagFilter = RTFM_LINEAR;
		rStage.m_TextureMinFilter = RTFM_LINEAR;
		rStage.m_TextureMipFilter = RTFM_NONE;
	}
	rFontInfo.m_ShaderHandle = CreatePixelShader( PSh );
	assert( rFontInfo.m_ShaderHandle != 0 );
}

struct FONT_VERTEX
{
	float x,y,z;
	float rhw;
	unsigned long color;
	float u,v;
};
#define FONT_BUFFER_SIZE 512
FONT_VERTEX g_FontVertexBuffer[FONT_BUFFER_SIZE*4];
unsigned short g_FontIndexBuffer[FONT_BUFFER_SIZE*6];

void
CRenderDX8::DrawString(
	long in_X, long in_Y,
	const char* in_pszString,
	unsigned long in_FontHandle,
	unsigned long in_Color
)
{
	assert(in_pszString);
	CFontInfoMapIterator It = m_FontsMap.find( in_FontHandle );
	assert( It != m_FontsMap.end() );
	const CFontInfo& rFontInfo = It->second;
	size_t nFontSymbols = rFontInfo.m_Symbols.size();
	assert( nFontSymbols >= 128 );
	//
	#define OFFSET (-0.5f)
	float OOSize = 1.0f/((float)rFontInfo.m_TextureSize);
	float YBegin = (float)in_Y + OFFSET;
	float YEnd = (float)( in_Y + rFontInfo.m_Height ) + OFFSET;
	float X = (float)in_X;
	long NVerticesFilled = 0;
	long NIndicesFilled = 0;
	long NSymbols = 0;
	for(size_t i=0; i<strlen(in_pszString) && i<FONT_BUFFER_SIZE; ++i)
	{
		long C = in_pszString[i];
		assert( 31<C && C<128 );
		const CSymbolInfo& rSymbol = rFontInfo.m_Symbols[C];
		float XBegin =	X + OFFSET;
		float XEnd =	X+rSymbol.m_Width + OFFSET;
		float UBegin =	rSymbol.m_X*OOSize;
		float UEnd =	(rSymbol.m_X+rSymbol.m_Width)*OOSize;
		float VBegin =	rSymbol.m_Y*OOSize;
		float VEnd =	(rSymbol.m_Y+rFontInfo.m_Height)*OOSize;
		//
		g_FontVertexBuffer[NVerticesFilled].x = XBegin;
		g_FontVertexBuffer[NVerticesFilled].y = YBegin;
		g_FontVertexBuffer[NVerticesFilled].z = 0.1f;
		g_FontVertexBuffer[NVerticesFilled].rhw = 1.0f;
		g_FontVertexBuffer[NVerticesFilled].color = in_Color;
		g_FontVertexBuffer[NVerticesFilled].u = UBegin;
		g_FontVertexBuffer[NVerticesFilled].v = VBegin;
		//
		g_FontVertexBuffer[NVerticesFilled+1].x = XEnd;
		g_FontVertexBuffer[NVerticesFilled+1].y = YBegin;
		g_FontVertexBuffer[NVerticesFilled+1].z = 0.1f;
		g_FontVertexBuffer[NVerticesFilled+1].rhw = 1.0f;
		g_FontVertexBuffer[NVerticesFilled+1].color = in_Color;
		g_FontVertexBuffer[NVerticesFilled+1].u = UEnd;
		g_FontVertexBuffer[NVerticesFilled+1].v = VBegin;
		//
		g_FontVertexBuffer[NVerticesFilled+2].x = XBegin;
		g_FontVertexBuffer[NVerticesFilled+2].y = YEnd;
		g_FontVertexBuffer[NVerticesFilled+2].z = 0.1f;
		g_FontVertexBuffer[NVerticesFilled+2].rhw = 1.0f;
		g_FontVertexBuffer[NVerticesFilled+2].color = in_Color;
		g_FontVertexBuffer[NVerticesFilled+2].u = UBegin;
		g_FontVertexBuffer[NVerticesFilled+2].v = VEnd;
		//
		g_FontVertexBuffer[NVerticesFilled+3].x = XEnd;
		g_FontVertexBuffer[NVerticesFilled+3].y = YEnd;
		g_FontVertexBuffer[NVerticesFilled+3].z = 0.1f;
		g_FontVertexBuffer[NVerticesFilled+3].rhw = 1.0f;
		g_FontVertexBuffer[NVerticesFilled+3].color = in_Color;
		g_FontVertexBuffer[NVerticesFilled+3].u = UEnd;
		g_FontVertexBuffer[NVerticesFilled+3].v = VEnd;
		//
		g_FontIndexBuffer[NIndicesFilled]   = NVerticesFilled;
		g_FontIndexBuffer[NIndicesFilled+1] = NVerticesFilled+1;
		g_FontIndexBuffer[NIndicesFilled+2] = NVerticesFilled+2;
		g_FontIndexBuffer[NIndicesFilled+3] = NVerticesFilled+1;
		g_FontIndexBuffer[NIndicesFilled+4] = NVerticesFilled+3;
		g_FontIndexBuffer[NIndicesFilled+5] = NVerticesFilled+2;
		//
		NVerticesFilled += 4;
		NIndicesFilled += 6;
		NSymbols++;
		X += rSymbol.m_Width;
	}

	HRESULT Res;
	Res = m_pD3D8Device->SetVertexShader( D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1 );
	assert(Res==D3D_OK);
	Res = m_pD3D8Device->BeginScene();
	assert(Res==D3D_OK);
	unsigned long NPasses = m_PixelShaderManager.UsePixelShader(rFontInfo.m_ShaderHandle);
	assert(NPasses>0);
	for(unsigned long i=0; i<NPasses; ++i)
	{
		m_PixelShaderManager.ApplyPixelShaderPass(i);

		Res = m_pD3D8Device->DrawIndexedPrimitiveUP(
			D3DPT_TRIANGLELIST,
			0, NVerticesFilled,
			NSymbols*2,
			g_FontIndexBuffer,
			D3DFMT_INDEX16,
			g_FontVertexBuffer, sizeof(FONT_VERTEX)
		);
		assert(Res==D3D_OK);
	}
	Res = m_pD3D8Device->EndScene();
	assert(Res==D3D_OK);
}




































